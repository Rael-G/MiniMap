name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    name: Build, Version, Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release

      - name: Run Tests
        run: dotnet test -c Release --no-build --verbosity normal

      - name: Setup git
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email github-actions[bot]@users.noreply.github.com

      - name: Install Versionize
        run: dotnet tool install --global Versionize

      - name: Versioning
        id: versionize
        run: versionize
        continue-on-error: true

      - name: No release required
        if: steps.versionize.outcome != 'success'
        run: echo "Skipping Release. No release required."

      - name: Push changes to GitHub
        if: steps.versionize.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: Extract changelog entry
        if: steps.versionize.outcome == 'success'
        id: changelog
        run: |
          body=$(awk '/^## /{i++} i==2{exit} i==1{print}' CHANGELOG.md)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Pack
        if: steps.versionize.outcome == 'success'
        run: dotnet pack -c Release --no-build --output ./artifacts /p:PackageReleaseNotes="${{ steps.changelog.outputs.body }}"
  
      - name: Get latest tag
        if: steps.versionize.outcome == 'success'
        id: get_tag
        run: echo "version=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        if: steps.versionize.outcome == 'success'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.version }}
          name: Release ${{ steps.get_tag.outputs.version }}
          body: ${{ steps.changelog.outputs.body }}
          files: ./artifacts/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NuGet
        if: steps.versionize.outcome == 'success'
        run: dotnet nuget push ./artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
        
